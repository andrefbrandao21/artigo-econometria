submit()
reminder(5)
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
evaluate <- function(func, dat){
func(dat)
}
submit()
evaluate(sqrt(c(1.4, 3.6, 7.9,8.8)))
evaluate(sqrt, (c(1.4, 3.6, 7.9,8.8)))
evaluate(sd, (c(1.4, 3.6, 7.9,8.8)))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[-1]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
telegram <- function(...) {
paste("START", paste(...), "STOP")
}
telegram('good', 'morning')
telegram <- function(...) {
# Usar paste para juntar os argumentos com um espaço
sentence <- paste(...)
# Formatar a string com START e STOP
formatted_sentence <- paste("START", sentence, "STOP")
return(formatted_sentence)
}
submit()
submit()
submit()
submit()
telegram <- function(...) {
paste("START", paste(...), "STOP", sep=" ")
}
telegram('good', 'morning')
telegram <- function(..., sep = " ") {
# Juntar os argumentos com o separador especificado
sentence <- paste(..., sep = sep)
# Formatar a string com START e STOP
formatted_sentence <- paste("START", sentence, "STOP")
return(formatted_sentence)
}
# Exemplo de uso
telegram("Good", "morning")
submit()
submit()
telegram('andre', 'balada')
quit()
library(swirl)
swirl()
5+7
x = 5+6
x <- 5 + 7
x
y <- x-3
y
rm(list=ls())
quit())
quit()
library(swirl)
swirl()
?
swirl()
help()
quit()
perms <- chooseMatrix(8,4)
# Preliminaries
#-------------------------------------------------
#install.packages('perm')
library(perm)
# Preliminaries
#-------------------------------------------------
install.packages('perm')
library(perm)
rm(list = ls())
# Questions 1 - 4
#-------------------------------------------------
perms <- chooseMatrix(8,4)
A <- matrix(c(0.462, 0.731, 0.571, 0.923, 0.333, 0.750, 0.893, 0.692), nrow=8, ncol=1, byrow=TRUE)
treatment_avg <- (1/4)*perms%*%A
control_avg <- (1/4)*(1-perms)%*%A
test_statistic <- abs(treatment_avg-control_avg)
rownumber <- apply(apply(perms, 1,
function(x) (x == c(0, 1, 0, 0, 0, 1, 1, 1))),
2, sum)
rownumber <- (rownumber == 8)
observed_test <- test_statistic[rownumber == TRUE]
larger_than_observed <- (test_statistic >= XXX)
larger_than_observed <- (test_statistic >= observed_test)
sum(larger_than_observed)
df <- data.frame(perms,control_avg,treatment_avg,test_statistic)
# Preliminaries
#-------------------------------------------------
install.packages('perm')
library(perm)
rm(list = ls())
# Questions 1 - 4
#-------------------------------------------------
perms <- chooseMatrix(8,4)
A <- matrix(c(0.462, 0.731, 0.571, 0.923, 0.333, 0.750, 0.893, 0.692), nrow=8, ncol=1, byrow=TRUE)
treatment_avg <- (1/4)*perms%*%A
control_avg <- (1/4)*(1-perms)%*%A
test_statistic <- abs(treatment_avg-control_avg)
rownumber <- apply(apply(perms, 1,
function(x) (x == c(0, 1, 0, 0, 0, 1, 1, 1))),
2, sum)
rownumber <- (rownumber == 8)
observed_test <- test_statistic[rownumber == TRUE]
larger_than_observed <- (test_statistic >= observed_test)
#numbers in which the statistic exceeds or is equal to the value in the observed date
sum(larger_than_observed)
df <- data.frame(perms,control_avg,treatment_avg,test_statistic)
# Question 5 - 6
#-------------------------------------------------
simul_stat <- as.vector(NULL)
schools <- read.csv('teachers_final.csv')
install.packages("perm")
# Preliminaries
#-------------------------------------------------
#install.packages('perm')
library(perm)
rm(list = ls())
# Questions 1 - 4
#-------------------------------------------------
perms <- chooseMatrix(8,4)
A <- matrix(c(0.462, 0.731, 0.571, 0.923, 0.333, 0.750, 0.893, 0.692), nrow=8, ncol=1, byrow=TRUE)
treatment_avg <- (1/4)*perms%*%A
control_avg <- (1/4)*(1-perms)%*%A
test_statistic <- abs(treatment_avg-control_avg)
rownumber <- apply(apply(perms, 1,
function(x) (x == c(0, 1, 0, 0, 0, 1, 1, 1))),
2, sum)
rownumber <- (rownumber == 8)
observed_test <- test_statistic[rownumber == TRUE]
larger_than_observed <- (test_statistic >= observed_test)
#numbers in which the statistic exceeds or is equal to the value in the observed date
sum(larger_than_observed)
df <- data.frame(perms,control_avg,treatment_avg,test_statistic)
# Question 5 - 6
#-------------------------------------------------
simul_stat <- as.vector(NULL)
schools <- read.csv('teachers_final.csv')
# Preliminaries
#-------------------------------------------------
#install.packages('perm')
library(perm)
rm(list = ls())
setwd("")
data <- read.csv("C:/Users/brand/Downloads/nlsw88.csv")
model <- lm(log(wage) ~ yrs_school, data = data)
View(data)
model <- lm(log(lwage) ~ yrs_school, data = data)
summary(model)
model <- lm(lwage ~ yrs_school, data = data)
summary(model)
confint(model, level = 0.90)
residuals(model)
sum(residuals(model))
model2 <- lm(lwage ~ black, data = data)
summary(model2)
model3 <-lm(lwage ~ yrs_school + ttl_exp, data = data)
summary(model3)
data$hipothesis = data$yrs_school + 2 * data$ttl_exp
model4 <- lm(lwage ~ hipothesis, data = data)
summary(model4)
anova(model_restricted, model_unrestricted)
model_unrestricted <- lm(lwage ~ yrs_school + ttl_exp + black, data = data)
model_restricted <- lm(lwage ~ hipothesis + black, data = data)
anova(model_restricted, model_unrestricted)
View(model_unrestricted)
install.packages('read.dbc')
datasus<- read.dbc("C:/Users/brand/OneDrive/Área de Trabalho/marcelo/RDAC0001.dbc")
library(read.dbc)
install.packages("read.dbc")
install.packages("remotes")
remotes::install_github("rfsaldanha/microdatasus")
library(microdatasus)
install.packages("remotes")
install.packages("remotes")
remotes::install_github("rfsaldanha/microdatasus")
library(microdatasus)
rm(list = ls())
options(scipen = 9999)
options(max.print = 100000)
library(readxl)
library(Synth)
dados <- read_excel("planilha_filtrada.xlsx")
covariadas = c("EMPRESAS")
#install.packages('Synth')
library(Synth)
rm(list = ls())
options(scipen = 9999)
options(max.print = 100000)
dados <- data.frame(
id = c(1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4),
ano = c(1998, 1999, 2000, 1998, 1999, 2000, 1998, 1999, 2000, 1998, 1999, 2000),
tratamento = c(1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
outcome = c(5, 6, 7, 4, 5, 6, 3, 4, 5, 2, 3, 4)
colnames(basque)
#install.packages('Synth')
library(Synth)
rm(list = ls())
options(scipen = 9999)
options(max.print = 100000)
dados <- data.frame(
ano = c(1998, 1999, 2000, 1998, 1999, 2000, 1998, 1999, 2000, 1998, 1999, 2000),
outcome = c(5, 6, 7, 4, 5, 6, 3, 4, 5, 2, 3, 4)
colnames(basque)
indicador = "gdpcap"
covariadas = c("school.illit")
# 1- Preparação dos dados----
df = dataprep(
# Declarando os dados
foo = basque,
# Covariadas/preditores
predictors = covariadas,
time.predictors.prior = 1964:1969,
dependent = indicador,
unit.variable = "regionno",
unit.names.variable = "regionname",
time.variable = "year",
# Unidade tratada
treatment.identifier = 17,
# Unidades nao tratadas
controls.identifier = c(2:16, 18),
time.plot = 1955:1997,
time.optimize.ssr = 1960:1969
)
#install.packages('Synth')
library(Synth)
rm(list = ls())
options(scipen = 9999)
options(max.print = 100000)
dados <- data.frame(
tratamento = c(1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
colnames(basque)
dados <- data.frame(
dados
?(Synth)
?(Synth)
?Synth
??Synth
colnames(basque)
#install.packages('Synth')
library(Synth)
rm(list = ls())
options(scipen = 9999)
options(max.print = 100000)
library(Synth)
data("basque")
colnames(basque)
indicador = "gdpcap"
covariadas = c("school.illit", "school.prim", "school.med",
"school.high", "school.post.high", "invest")
# 1- Preparação dos dados----
df = dataprep(
# Declarando os dados
foo = basque,
# Covariadas/preditores
predictors = covariadas,
time.predictors.prior = 1964:1969,
special.predictors = list(
list("popdens", 1969, "mean"),
list("gdpcap", 1960:1969, "mean"),
list("sec.agriculture", seq(1961,1969,2), "mean"),
list("sec.energy", seq(1961,1969,2), "mean"),
list("sec.industry", seq(1961,1969,2), "mean"),
list("sec.construction", seq(1961,1969,2), "mean"),
list("sec.services.venta", seq(1961,1969,2), "mean"),
list("sec.services.nonventa", seq(1961,1969,2), "mean")
),
dependent = indicador,
unit.variable = "regionno",
unit.names.variable = "regionname",
time.variable = "year",
# Unidade tratada
treatment.identifier = 17,
# Unidades nao tratadas
controls.identifier = c(2:16, 18),
time.plot = 1955:1997,
time.optimize.ssr = 1960:1969
)
# 2 Inspeção dos dados----
# Covariadas/preditores
df$X0
df$X1
# Outcome (pib per capita)
df$Z0
df$Z1
# 3 Implementação do modelo----
res = synth(data.prep.obj = df)
# 3.1 Tabela sumaria
tab1 = synth.tab(synth.res = res,
dataprep.res = df)
tab1$tab.w
tab1$tab.pred
tab1$tab.v
# 3.2 Estimativa do Gap
gap = df$Y1plot - (df$Y0plot %*% res$solution.w)
# 3.3 Exploração gráfica
gaps.plot(synth.res = res,
dataprep.res = df,
Ylab = "Efeitos no PIB per capita",
Xlab = "Ano",
Main = NA)
abline(v=1970, lty="dotted", lwd=2)
path.plot(synth.res = res,
dataprep.res = df,
Ylab = "PIB per capita",
Xlab = "Ano",
Main = NA,
Legend = c("Basco", "Basco Sintético"))
abline(v=1970, lty="dotted", lwd=2)
View(basque)
d
library(PNADcIBGE)
#install.packages('PNADcIBGE')
rm(list = ls())
d <- get_pnadc(year = y, quarter = q, vars = c('UF', 'V2007', 'V2009', 'V2010', 'VD3004', 'VD3005'))
d <- get_pnadc(year = 2012, quarter = 1, vars = c('UF', 'V2007', 'V2009', 'V2010', 'VD3004', 'VD3005'))
d <- d$variables
d
summary(d)
d <- get_pnadc(year = 2012, quarter = 1, vars = c('UF', 'V2007', 'V2009', 'V2010', 'VD3004', 'VD3005'))
vars <- d$variables
View(d)
help("get_pnadc")
for (y in seq(2012, 2023)){
for (q in seq(1,4)){
d <- get_pnadc(year = y, quarter = q, vars = c('UF', 'V2007', 'V2009', 'V2010', 'VD3004', 'VD3005'))
d <- d$variables
df <- rbind(df, d)
}
}
df
df <- data.frame()
df <- rbind(df, d)
df <- data.frame()
for (y in seq(2012, 2023)){
for (q in seq(1,4)){
d <- get_pnadc(year = y, quarter = q, vars = c('UF', 'V2007', 'V2009', 'V2010', 'VD3004', 'VD3005'))
d <- d$variables
df <- rbind(df, d)
}
}
df
View(df)
View(df)
View(d)
View(df)
View(df)
df <- df[vars]
df <- df[,vars]
df2 <- df[ 'UF', 'V2007', 'V2009', 'V2010', 'VD3004', 'VD3005']
df2 <- df[, 'UF', 'V2007', 'V2009', 'V2010', 'VD3004', 'VD3005']
#install.packages('PNADcIBGE')
rm(list = ls())
library(PNADcIBGE)
df <- data.frame()
vars = c("UF", "V2007", "V2009", "V2010", "VD3004", "VD3005")
for (q in seq(1,4)){
d <- get_pnadc(year = 2023, quarter = q, vars = vars)
d <- d$variables
d <- d[c("Ano", "Trimestre",  "UF", "V2007", "V2009", "V2010", "VD3004", "VD3005")]
df <- rbind(df, d)
}
df
View(df)
df[,"VD3004" ]
summary(df$VD3004)
dados$x1[dados$x1 %in% c("Sem instrução e menos de 1 ano de estudo",
"Fundamental incompleto ou equivalente")] <- 0
df$VD3004[df$VD3004 %in% c("Sem instrução e menos de 1 ano de estudo",
"Fundamental incompleto ou equivalente")] <- 0
print("Depois da substituição:")
print(df)
summary(df$VD3004)
library(PNADcIBGE)
df <- data.frame()
vars = c("UF", "V2007", "V2009", "V2010", "VD3004", "VD3005")
for (q in seq(1,4)){
d <- get_pnadc(year = 2023, quarter = q, vars = vars)
d <- d$variables
d <- d[c("Ano", "Trimestre",  "UF", "V2007", "V2009", "V2010", "VD3004", "VD3005")]
df <- rbind(df, d)
}
getwd()
write.csv(dados, "dados_exportados.csv", row.names = FALSE)
write.csv(df, "dados_exportados.csv", row.names = FALSE)
getwd()
resumo3
rm(list = ls())
df <- read.csv('tratamento1.csv')
rm(list = ls())
df <- read.csv('tratamento1.csv')
getwd()
setwd("C:/Users/brand/Documents/André Filipe/Estudos/PPGE-UFPB/Obrigatórias/econometria/trabalho/dados")
df <- read.csv('tratamento1.csv')
modelo1_logit <- glm(fundamental_completo ~ HOMEM + BRANCO, data = df, family = binomial(link = "logit"))
modelo2_logit <- glm(medio_completo ~ HOMEM + BRANCO, data = df, family = binomial(link = "logit"))
modelo3_logit <- glm(superior_completo ~ HOMEM + BRANCO, data = df, family = binomial(link = "logit"))
# Resumo dos resultados
resumo1 = summary(modelo1_logit)
resumo2 = summary(modelo2_logit)
resumo3 = summary(modelo3_logit)
resumo1
resumo2
resumo3
View(resumo3)
install.packages("lmtest")   # Para o teste de Wald e heterocedasticidade
install.packages("car")      # Para o teste de VIF
install.packages("pscl")     # Para o Pseudo R²
install.packages("sandwich") # Para erros padrão robustos
# Carregando os pacotes
library(lmtest)
library(car)
library(pscl)
library(sandwich)
# 1. Teste de Wald para significância dos coeficientes
# Usando a função `coeftest` do pacote `lmtest` com erros padrão robustos
teste_wald <- coeftest(modelo, vcov = vcovHC(modelo1_logit, type = "HC1"))
# 1. Teste de Wald para significância dos coeficientes
# Usando a função `coeftest` do pacote `lmtest` com erros padrão robustos
teste_wald <- coeftest(modelo, vcov = vcovHC(modelo1_logit, type = "HC1"))
# 1. Teste de Wald para significância dos coeficientes
# Usando a função `coeftest` do pacote `lmtest` com erros padrão robustos
teste_wald <- coeftest(modelo1_logit, vcov = vcovHC(modelo1_logit, type = "HC1"))
print("Teste de Wald:")
print(teste_wald)
pseudo_r2 <- pR2(modelo1_logit)
print("Pseudo R² (McFadden):")
print(pseudo_r2)
# 3. Teste de VIF (Fator de Inflação da Variância)
# Usando a função `vif` do pacote `car`
vif_resultado <- vif(modelo1_logit)
print("Fator de Inflação da Variância (VIF):")
print(vif_resultado)
# Usando a função `bptest` do pacote `lmtest`
# Para modelos logit, é comum usar uma versão adaptada do teste
teste_bp <- bptest(modelo1_logit, studentize = TRUE)
print("Teste de Breusch-Pagan para Heterocedasticidade:")
print(teste_bp)
modelos = [modelo1_logit, modelo2_logit, modelo3_logit]
modelos <- list(modelo1_logit, modelo2_logit, modelo3_logit)
#4. Teste de Heterocedasticidade (Breusch-Pagan)
# Usando a função `bptest` do pacote `lmtest`
# Para modelos logit, é comum usar uma versão adaptada do teste
for (m in modelos){
teste_bp <- bptest(m, studentize = TRUE)
print("Teste de Breusch-Pagan para Heterocedasticidade:")
print(teste_bp)}
# 3. Teste de VIF (Fator de Inflação da Variância)
# Usando a função `vif` do pacote `car`
for (m in modelos){
vif_resultado <- vif(modelo1_logit)
print("Fator de Inflação da Variância (VIF):")
print(vif_resultado)}
for (m in modelos){
robust_se <- sqrt(diag(vcovHC(m, type = "HC1")))
}
print(robust_se)
for (m in modelos){
robust_se <- sqrt(diag(vcovHC(m, type = "HC1")))
print(robust_se)
}
# Exibir resultados com erros padrão robustos
for (m in modelos){
print(coeftest(modelo_logit, vcov = vcovHC(m, type = "HC1")))
}
print(coeftest(m, vcov = vcovHC(m, type = "HC1")))
# Exibir resultados com erros padrão robustos
for (m in modelos){
print(coeftest(m, vcov = vcovHC(m, type = "HC1")))
}
# 3. Teste de VIF (Fator de Inflação da Variância)
# Usando a função `vif` do pacote `car`
for (m in modelos){
vif_resultado <- vif(modelo1_logit)
print("Fator de Inflação da Variância (VIF):")
print(vif_resultado)}
#4. Teste de Heterocedasticidade (Breusch-Pagan)
# Usando a função `bptest` do pacote `lmtest`
# Para modelos logit, é comum usar uma versão adaptada do teste
for (m in modelos){
teste_bp <- bptest(m, studentize = TRUE)
print("Teste de Breusch-Pagan para Heterocedasticidade:")
print(teste_bp)}
# 3. Teste de VIF (Fator de Inflação da Variância)
# Usando a função `vif` do pacote `car`
for (m in modelos){
vif_resultado <- vif(m)
print("Fator de Inflação da Variância (VIF):")
print(vif_resultado)}
for (m in modelos){
robust_se <- sqrt(diag(vcovHC(m, type = "HC1")))
print(robust_se)
}
# Exibir resultados com erros padrão robustos
for (m in modelos){
print(coeftest(m, vcov = vcovHC(m, type = "HC1")))
}
